version: "1.0.0"
title: "Frontend Coder"
description: "Professional frontend developer specializing in Vue, React, HTML/CSS implementation from design data"
instructions: |
  You are a professional frontend developer with expert-level knowledge of:
  - Vue.js (Composition API, Options API, Vue 3 features, Nuxt.js)
  - React (Hooks, Context, Next.js, modern patterns)
  - Modern HTML5 and semantic markup
  - Advanced CSS (Grid, Flexbox, CSS Variables, Animations, Responsive Design)
  - JavaScript/TypeScript (ES6+, async/await, modules)
  - Frontend build tools (Vite, Webpack, Parcel)
  - CSS frameworks (Tailwind CSS, Bootstrap, styled-components)
  - UI component libraries (Vuetify, Ant Design, Material-UI, Chakra UI)
  - State management (Vuex, Pinia, Redux, Zustand)
  - Testing frameworks (Jest, Vitest, Testing Library)

  Your primary responsibilities:
  1. **Implementation**: Convert design data into clean, maintainable frontend code
  2. **Best Practices**: Follow modern development patterns and conventions
  3. **Responsive Design**: Ensure components work across different screen sizes
  4. **Accessibility**: Implement proper ARIA attributes and semantic HTML
  5. **Performance**: Write optimized code with proper lazy loading and code splitting
  6. **Component Architecture**: Create reusable, well-structured components

  When you encounter situations requiring delegation:
  - Design clarifications or missing design specifications
  - API integration requirements or backend data structures
  - Complex business logic that needs domain expertise
  - Performance optimization beyond frontend scope
  - Security considerations requiring specialized knowledge

  Always provide clear, actionable requirements when delegating to the parent agent.

parameters:
  - key: task_description
    input_type: string
    requirement: required
    description: "Detailed description of the frontend coding task"

  - key: framework
    input_type: string
    requirement: optional
    default: "vue"
    description: "Frontend framework to use (vue, react, html-css, next, nuxt)"

  - key: design_data
    input_type: string
    requirement: optional
    default: ""
    description: "JSON design data from design-extractor or other design source"

  - key: styling_approach
    input_type: string
    requirement: optional
    default: "tailwind"
    description: "Styling approach (tailwind, css-modules, styled-components, scss, vanilla-css)"

  - key: component_type
    input_type: string
    requirement: optional
    default: "component"
    description: "Type of implementation (component, page, layout, full-app)"

  - key: responsive_requirements
    input_type: string
    requirement: optional
    default: "mobile-first"
    description: "Responsive design requirements (mobile-first, desktop-first, specific-breakpoints)"

  - key: accessibility_level
    input_type: string
    requirement: optional
    default: "wcag-aa"
    description: "Accessibility compliance level (basic, wcag-aa, wcag-aaa)"

  - key: additional_requirements
    input_type: string
    requirement: optional
    default: ""
    description: "Any additional requirements, constraints, or specifications"

settings:
  goose_provider: "openrouter"
  goose_model: "anthropic/claude-3.5-sonnet:beta"
  temperature: 0.2

extensions:
  - type: builtin
    name: developer
    timeout: 300
    bundled: true
    description: "Core development tools for file operations and code editing"
  - type: stdio
    name: context7
    cmd: bunx
    args:
      - "@upstash/context7-mcp"
    timeout: 300
    bundled: false
    description: "Access to Context7.com's documentation database for up-to-date library and framework documentation"

response:
  json_schema:
    type: object
    properties:
      implementation_status:
        type: string
        enum: ["completed", "needs_delegation", "partial_completion"]
        description: "Status of the implementation task"

      code_files:
        type: array
        items:
          type: object
          properties:
            filename:
              type: string
              description: "Name of the code file"
            file_path:
              type: string
              description: "Suggested file path for the implementation"
            content:
              type: string
              description: "Complete file content"
            file_type:
              type: string
              description: "Type of file (component, style, test, config, etc.)"
            framework:
              type: string
              description: "Framework/technology used"
            dependencies:
              type: array
              items:
                type: string
              description: "Required dependencies for this file"
        description: "Generated code files and components"

      implementation_details:
        type: object
        properties:
          framework_used:
            type: string
            description: "Framework and version used for implementation"
          styling_approach:
            type: string
            description: "Styling method implemented"
          component_structure:
            type: object
            properties:
              main_components:
                type: array
                items:
                  type: string
                description: "List of main components created"
              sub_components:
                type: array
                items:
                  type: string
                description: "List of sub-components created"
              utilities:
                type: array
                items:
                  type: string
                description: "Utility functions or helpers created"
            description: "Structure of the implementation"
          responsive_implementation:
            type: array
            items:
              type: object
              properties:
                breakpoint:
                  type: string
                description:
                  type: string
                changes:
                  type: array
                  items:
                    type: string
            description: "Responsive design implementation details"
          accessibility_features:
            type: array
            items:
              type: string
            description: "Accessibility features implemented"
        description: "Detailed information about the implementation"

      setup_instructions:
        type: object
        properties:
          dependencies:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                version:
                  type: string
                install_command:
                  type: string
                purpose:
                  type: string
            description: "Required dependencies and installation commands"
          dev_dependencies:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                version:
                  type: string
                install_command:
                  type: string
                purpose:
                  type: string
            description: "Development dependencies needed"
          setup_steps:
            type: array
            items:
              type: string
            description: "Step-by-step setup instructions"
          run_commands:
            type: object
            properties:
              dev:
                type: string
                description: "Command to run in development mode"
              build:
                type: string
                description: "Command to build for production"
              test:
                type: string
                description: "Command to run tests"
            description: "Common run commands"
        description: "Setup and installation instructions"

      delegation_requirements:
        type: array
        items:
          type: object
          properties:
            requirement_type:
              type: string
              description: "Type of requirement (design_clarification, api_spec, business_logic, etc.)"
            priority:
              type: string
              enum: ["high", "medium", "low"]
              description: "Priority level of the requirement"
            description:
              type: string
              description: "Detailed description of what needs to be clarified or provided"
            blocking:
              type: boolean
              description: "Whether this requirement blocks further implementation"
            suggested_agent:
              type: string
              description: "Suggested type of agent or specialist to handle this requirement"
        description: "Requirements that need to be delegated to parent agent or other specialists"

      recommendations:
        type: object
        properties:
          performance_optimizations:
            type: array
            items:
              type: string
            description: "Recommended performance optimizations"
          testing_strategy:
            type: array
            items:
              type: string
            description: "Recommended testing approaches"
          future_enhancements:
            type: array
            items:
              type: string
            description: "Suggestions for future improvements"
          best_practices:
            type: array
            items:
              type: string
            description: "Best practices implemented and recommended"
        description: "Recommendations and suggestions"

    required:
      - implementation_status
      - code_files
      - implementation_details

prompt: |
  **Frontend Coding Task**: {{ task_description }}

  **Framework**: {{ framework }}
  **Styling Approach**: {{ styling_approach }}
  **Component Type**: {{ component_type }}
  **Responsive Requirements**: {{ responsive_requirements }}
  **Accessibility Level**: {{ accessibility_level }}

  {% if design_data %}
  **Design Data**:
  ```json
  {{ design_data | indent(2) }}
  ```

  Use this design data to inform your implementation. Extract all relevant information including:
  - Layout structure and component hierarchy
  - Styling properties (colors, typography, spacing)
  - Interactive elements and behaviors
  - Responsive design considerations
  {% endif %}

  {% if additional_requirements %}
  **Additional Requirements**: {{ additional_requirements }}
  {% endif %}

  ## Your Task

  Implement the requested frontend functionality following these guidelines:

  1. **Code Quality**: Write clean, maintainable, and well-documented code
  2. **Modern Patterns**: Use current best practices for the chosen framework
  3. **Responsive Design**: Ensure the implementation works across different screen sizes
  4. **Accessibility**: Implement proper semantic HTML and ARIA attributes
  5. **Performance**: Optimize for loading speed and runtime performance
  6. **Reusability**: Create modular, reusable components when appropriate

  ## Implementation Steps

  1. Analyze the requirements and design data (if provided)
  2. Plan the component structure and file organization
  3. Implement the core functionality using the specified framework
  4. Apply styling using the specified approach
  5. Add responsive behavior and accessibility features
  6. Include any necessary setup instructions and dependencies

  ## When to Delegate

  If you encounter any of the following, create delegation requirements:
  - Missing or unclear design specifications
  - API integration requirements not specified
  - Complex business logic needing domain expertise
  - Security considerations beyond frontend scope
  - Performance requirements needing backend optimization

  Provide a comprehensive implementation with all necessary files, setup instructions, and clear documentation. If delegation is needed, specify exactly what information or assistance is required from the parent agent.
